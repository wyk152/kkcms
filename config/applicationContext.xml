<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Middle tier application context definition for the image database.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!-- 扫描Service 
	（注解扫描自动构建bean）
	-->
	<!-- <context:component-scan base-package="cn.itcast.test.service"></context:component-scan>
	 -->
	
	
	<!-- 导入外部的properties配置文件 -->
	 <context:property-placeholder location="classpath:data.properties" />
	<!-- 配置数据源 -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}"></property>
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="3"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		<!--最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<!-- 配置sessionFactory，并将dataSource指向c3p0创建的dataSource： -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<!-- 配置hibernate映射文件路径 ，除了此种方法配置还可以配置成注解的方式映射实体 -->
		<property name="mappingLocations">
			<list>
				 <value>classpath:org/wyk/nsfw/*/entity/*.hbm.xml</value>
				<!-- <value>classpath:cn/itcast/test/entity/*.hbm.xml</value> -->
			</list>
		</property>
	</bean>
	<!-- 配置dao -->
	<!-- 所有业务dao的parent -->
	<!--  <bean id="baseDao" abstract="true" >
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
	<!-- 开启HibernateTemplate，并且为其注入SessionFactory
	使用HibernateTemplate不太方便的就是要获取session得通过getSessionFactory()方法获取 
	在创建class类的时候通过set-'name'的方式将sessionFactory对象注入‘class’创建的对象中
	
	-->
	<!-- <bean id="HibernateTemplate" class="cn.itcast.test.dao.impl.TestDaoImpl"> -->
	<!-- <bean id="HibernateTemplate" class="cn.itcast.test.dao.impl.TestDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
	 <!-- <import resource="classpath:org/wyk/nsfw/role/config/*-spring.xml"/> -->
	<!-- <import resource="classpath:cn/itcast/test/config/*-spring.xml"/> -->
	
	
	<!-- 配置Spring事务管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事务通知 -->
	  <tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			 <tx:method name="find*" read-only="true"/> 
			<tx:method name="get*"  read-only="true"/> 
			<tx:method name="load*" read-only="true"/>
			<tx:method name="list*" read-only="true"/>
			 <tx:method name="search*" read-only="true"/> 
			<!-- 运行中出现异常时 数据回滚 -->
			<tx:method name="*" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>  
	<!-- 配置需要进行事务控制的类 (拦截以Service结尾的bean进行事务控制)-->
	  <aop:config>
		<!--  <aop:pointcut id="serviceOperation" expression="bean(*Service)"/> -->
		<!-- <aop:pointcut id="serviceOperation" expression="execution(* cn.itcast.test.service.impl.*.*(..))"/> -->
		<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" /> -->
		<aop:advisor advice-ref="txAdvice" pointcut="bean(*Service)" />
	</aop:config> 
	 <!-- 所有业务dao的parent -->
    <bean id="baseDao" abstract="true">
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
        <!-- 权限鉴定类 -->
    <bean id="permissionCheck" class="org.wyk.main.permission.impl.PermissionCheckImpl"></bean>
    
    <!-- 引入外部sprign配置文件 -->
	 <import resource="classpath:org/wyk/nsfw/*/config/*-spring.xml"/>

	
</beans>
